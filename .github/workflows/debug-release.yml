name: 'Debug Release'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0-test)'
        required: true
        type: string
        default: 'v0.0.1-debug'

jobs:
  debug-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug environment
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          echo "Input version: ${{ github.event.inputs.version }}"
          echo "Token length: ${#GITHUB_TOKEN}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^v ]]; then
            VERSION="v$VERSION"
          fi
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version set to: $VERSION"
      
      - name: Test GitHub API access
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Testing GitHub API access...');
            
            // 测试基本 API 访问
            try {
              const { data: user } = await github.rest.users.getAuthenticated();
              console.log('✅ Authenticated as:', user.login);
            } catch (error) {
              console.error('❌ Authentication failed:', error);
              throw error;
            }
            
            // 测试仓库访问
            try {
              const { data: repo } = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              console.log('✅ Repository access: OK');
              console.log('Repository full name:', repo.full_name);
              console.log('Repository permissions:', repo.permissions);
            } catch (error) {
              console.error('❌ Repository access failed:', error);
              throw error;
            }
            
            // 测试查看已有的 releases
            try {
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 5
              });
              console.log('✅ Can list releases:', releases.length, 'found');
              releases.forEach(release => {
                console.log(`  - ${release.tag_name}: ${release.name}`);
              });
            } catch (error) {
              console.error('❌ Cannot list releases:', error);
            }
            
            return 'API test completed';
      
      - name: Try creating a test release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Attempting to create test release...');
            console.log('Tag name:', process.env.PACKAGE_VERSION);
            
            try {
              // 检查标签是否已存在
              let existingRelease = null;
              try {
                existingRelease = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: process.env.PACKAGE_VERSION
                });
                console.log('Found existing release:', existingRelease.data.id);
                
                // 删除已存在的测试 release
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: existingRelease.data.id
                });
                console.log('Deleted existing test release');
                
                // 也删除标签（如果存在）
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${process.env.PACKAGE_VERSION}`
                  });
                  console.log('Deleted existing tag');
                } catch (e) {
                  console.log('Tag deletion failed or tag does not exist:', e.message);
                }
              } catch (error) {
                console.log('No existing release found (this is expected for new releases)');
              }
              
              // 创建新的 release
              const releaseData = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: process.env.PACKAGE_VERSION,
                name: `Debug Release ${process.env.PACKAGE_VERSION}`,
                body: `This is a debug release created at ${new Date().toISOString()}`,
                draft: true,
                prerelease: true
              };
              
              console.log('Creating release with data:', JSON.stringify(releaseData, null, 2));
              
              const { data } = await github.rest.repos.createRelease(releaseData);
              
              console.log('✅ Release created successfully!');
              console.log('Release ID:', data.id);
              console.log('Release URL:', data.html_url);
              
              return data.id;
            } catch (error) {
              console.error('❌ Release creation failed:', error);
              console.error('Error status:', error.status);
              console.error('Error message:', error.message);
              if (error.response) {
                console.error('Response data:', error.response.data);
              }
              throw error;
            }
