name: 'Release Build'

on:
  push:
    tags:
      - 'v*' # 当推送以 v 开头的标签时触发，如 v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Get version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: $VERSION"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            echo "Using tag version: $VERSION"
          fi
          
          # 确保版本号以 v 开头
          if [[ ! "$VERSION" =~ ^v ]]; then
            VERSION="v$VERSION"
          fi
          
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Final version: $VERSION"
        
      - name: Generate release notes
        id: release-notes
        run: |
          if [ -f "CHANGELOG.md" ]; then
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            sed -n "/## \[${PACKAGE_VERSION#v}\]/,/## \[/p" CHANGELOG.md | head -n -1 >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "RELEASE_NOTES=Release ${PACKAGE_VERSION}" >> $GITHUB_ENV
          fi
        
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Starting release creation...');
            console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
            console.log('Tag:', process.env.PACKAGE_VERSION);
            console.log('Release notes:', process.env.RELEASE_NOTES?.substring(0, 100) + '...');
            
            try {
              // 检查标签是否已存在
              let tagExists = false;
              try {
                await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${process.env.PACKAGE_VERSION}`
                });
                tagExists = true;
                console.log('Tag already exists');
              } catch (error) {
                console.log('Tag does not exist yet, will be created');
              }
              
              // 检查是否已存在同名的release
              try {
                const existingRelease = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: process.env.PACKAGE_VERSION
                });
                console.log('Release already exists, updating...');
                return existingRelease.data.id;
              } catch (error) {
                console.log('No existing release found, creating new one...');
              }
              
              const { data } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: process.env.PACKAGE_VERSION,
                name: `AiOne ${process.env.PACKAGE_VERSION}`,
                body: process.env.RELEASE_NOTES || `Release ${process.env.PACKAGE_VERSION}`,
                draft: true,
                prerelease: process.env.PACKAGE_VERSION.includes('-'),
                generate_release_notes: false  // 暂时禁用自动生成，避免冲突
              });
              
              console.log('Release created successfully with ID:', data.id);
              return data.id;
            } catch (error) {
              console.error('Error creating release:', error);
              console.error('Error details:', JSON.stringify(error, null, 2));
              throw error;
            }

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Apple Silicon macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
            os: 'macos'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x86_64'
            os: 'macos'
          - platform: 'ubuntu-20.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x86_64'
            os: 'linux'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x86_64'
            os: 'windows'
          - platform: 'windows-latest'
            args: '--target i686-pc-windows-msvc'
            target: 'i686-pc-windows-msvc'
            arch: 'i686'
            os: 'windows'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
          releaseName: 'AiOne v__VERSION__'
          releaseBody: |
            AiOne desktop application built for ${{ matrix.os }}-${{ matrix.arch }}.
            
            **Platform**: ${{ matrix.os }}
            **Architecture**: ${{ matrix.arch }}
            **Target**: ${{ matrix.target }}
            
            See the assets below to download the appropriate version for your system.

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]
    if: always() && needs.create-release.result == 'success' && needs.build-tauri.result == 'success'

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            });
            
            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            });
            
            console.log(`Found ${assets.length} assets for release ${release.tag_name}`);
            assets.forEach(asset => console.log(`- ${asset.name}`));
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: release.tag_name.includes('-')
            });
            
            console.log(`Released ${release.tag_name} successfully!`);
      
      - name: Notify on success
        if: success()
        run: |
          echo "🎉 Release published successfully!"
          echo "Check the release at: https://github.com/${{ github.repository }}/releases"
