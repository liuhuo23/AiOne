name: 'Release Build'

on:
  push:
    tags:
      - 'rv*' # 当推送以 v 开头的标签时触发，如 v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  create-release:
    permissions:
      contents: write
    timeout-minutes: 1
    runs-on: macos-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - name: start
        run: echo "Starting release creation..."
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
      
      - name: Get version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: $VERSION"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            echo "Using tag version: $VERSION"
          fi
          
          # 确保版本号以 v 开头
          if [[ ! "$VERSION" =~ ^v ]]; then
            VERSION="v$VERSION"
          fi
          
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Final version: $VERSION"
        
      - name: Generate release notes
        id: release-notes
        run: |
          echo "Generating release notes for version: ${PACKAGE_VERSION}"
          if [ -f "CHANGELOG.md" ]; then
            echo "Found CHANGELOG.md, extracting notes..."
            # 使用更兼容的方式提取 changelog
            VERSION_WITHOUT_V="${PACKAGE_VERSION#v}"
            echo "Looking for version: ${VERSION_WITHOUT_V}"
            
            # 提取版本相关的 changelog 内容
            CHANGELOG_CONTENT=$(sed -n "/## \[${VERSION_WITHOUT_V}\]/,/^## \[/p" CHANGELOG.md | sed '$d' || echo "")
            
            if [ -n "$CHANGELOG_CONTENT" ]; then
              echo "Found changelog content for version ${VERSION_WITHOUT_V}"
              echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
              echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            else
              echo "No specific changelog found for version ${VERSION_WITHOUT_V}, using default"
              echo "RELEASE_NOTES=Release ${PACKAGE_VERSION}" >> $GITHUB_ENV
            fi
          else
            echo "No CHANGELOG.md found, using default release notes"
            echo "RELEASE_NOTES=Release ${PACKAGE_VERSION}" >> $GITHUB_ENV
          fi
          
          echo "Release notes generated successfully"
        
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Starting release creation...');
            console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
            console.log('Tag:', process.env.PACKAGE_VERSION);
            console.log('Release notes:', process.env.RELEASE_NOTES?.substring(0, 100) + '...');
            
            try {
              // 检查标签是否已存在
              let tagExists = false;
              try {
                await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${process.env.PACKAGE_VERSION}`
                });
                tagExists = true;
                console.log('Tag already exists');
              } catch (error) {
                console.log('Tag does not exist yet, will be created');
              }
              
              // 检查是否已存在同名的release
              try {
                const existingRelease = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: process.env.PACKAGE_VERSION
                });
                console.log('Release already exists, updating...');
                return existingRelease.data.id;
              } catch (error) {
                console.log('No existing release found, creating new one...');
              }
              
              const { data } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: process.env.PACKAGE_VERSION,
                name: `AiOne ${process.env.PACKAGE_VERSION}`,
                body: process.env.RELEASE_NOTES || `Release ${process.env.PACKAGE_VERSION}`,
                draft: true,
                prerelease: process.env.PACKAGE_VERSION.includes('-'),
                generate_release_notes: false  // 暂时禁用自动生成，避免冲突
              });
              
              console.log('Release created successfully with ID:', data.id);
              return data.id;
            } catch (error) {
              console.error('Error creating release:', error);
              console.error('Error details:', JSON.stringify(error, null, 2));
              throw error;
            }

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Apple Silicon macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
            os: 'macos'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x86_64'
            os: 'macos'
          # - platform: 'ubuntu-latest'
          #   args: ''
          #   target: 'x86_64-unknown-linux-gnu'
          #   arch: 'x86_64'
          #   os: 'linux'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x86_64'
            os: 'windows'
          - platform: 'windows-latest'
            args: '--target i686-pc-windows-msvc'
            target: 'i686-pc-windows-msvc'
            arch: 'i686'
            os: 'windows'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm run build

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
          releaseName: 'AiOne v__VERSION__'
          releaseBody: |
            AiOne desktop application built for ${{ matrix.os }}-${{ matrix.arch }}.
            
            **Platform**: ${{ matrix.os }}
            **Architecture**: ${{ matrix.arch }}
            **Target**: ${{ matrix.target }}
            
            See the assets below to download the appropriate version for your system.

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    if: always() && needs.create-release.result == 'success' && needs.build-tauri.result == 'success'

    steps:
      - uses: actions/checkout@v4
      
      - name: Get release version
        run: |
          # 从 release ID 获取版本信息
          echo "Getting release information..."
        
      - name: Publish release with changelog
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const fs = require('fs');
            
            // 获取当前 release 信息
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            });
            
            console.log(`Processing release: ${release.tag_name}`);
            
            // 获取构建产物
            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            });
            
            console.log(`Found ${assets.length} assets for release ${release.tag_name}`);
            assets.forEach(asset => console.log(`- ${asset.name} (${(asset.size / 1024 / 1024).toFixed(2)} MB)`));
            
            // 读取 CHANGELOG.md 并提取相关版本的内容
            let changelogContent = '';
            try {
              const changelogPath = 'CHANGELOG.md';
              if (fs.existsSync(changelogPath)) {
                const changelog = fs.readFileSync(changelogPath, 'utf8');
                
                // 提取版本号（去掉 v 前缀）
                const versionWithoutV = release.tag_name.replace(/^v/, '');
                console.log(`Looking for changelog entry for version: ${versionWithoutV}`);
                
                // 使用正则表达式提取特定版本的内容
                const versionRegex = new RegExp(`## \\[${versionWithoutV}\\]([\\s\\S]*?)(?=## \\[|$)`, 'i');
                const match = changelog.match(versionRegex);
                
                if (match && match[1]) {
                  changelogContent = match[1].trim();
                  console.log(`Found changelog content for version ${versionWithoutV}`);
                } else {
                  console.log(`No changelog entry found for version ${versionWithoutV}`);
                }
              } else {
                console.log('CHANGELOG.md not found');
              }
            } catch (error) {
              console.error('Error reading CHANGELOG.md:', error.message);
            }
            
            // 构建发布描述
            let releaseBody = '';
            
            if (changelogContent) {
              releaseBody = `# AiOne ${release.tag_name}\n\n${changelogContent}\n\n`;
            } else {
              releaseBody = `# AiOne ${release.tag_name}\n\nRelease ${release.tag_name}\n\n`;
            }
            
            // 添加下载信息
            releaseBody += `## 📦 下载\n\n`;
            releaseBody += `选择适合您操作系统的安装包：\n\n`;
            
            // 按平台分组显示资源
            const platformAssets = {
              windows: assets.filter(asset => asset.name.includes('.msi') || asset.name.includes('.exe')),
              macos: assets.filter(asset => asset.name.includes('.dmg') || asset.name.includes('.app')),
              linux: assets.filter(asset => asset.name.includes('.deb') || asset.name.includes('.AppImage'))
            };
            
            if (platformAssets.windows.length > 0) {
              releaseBody += `### Windows\n`;
              platformAssets.windows.forEach(asset => {
                releaseBody += `- [${asset.name}](${asset.browser_download_url}) (${(asset.size / 1024 / 1024).toFixed(2)} MB)\n`;
              });
              releaseBody += `\n`;
            }
            
            if (platformAssets.macos.length > 0) {
              releaseBody += `### macOS\n`;
              platformAssets.macos.forEach(asset => {
                releaseBody += `- [${asset.name}](${asset.browser_download_url}) (${(asset.size / 1024 / 1024).toFixed(2)} MB)\n`;
              });
              releaseBody += `\n`;
            }
            
            if (platformAssets.linux.length > 0) {
              releaseBody += `### Linux\n`;
              platformAssets.linux.forEach(asset => {
                releaseBody += `- [${asset.name}](${asset.browser_download_url}) (${(asset.size / 1024 / 1024).toFixed(2)} MB)\n`;
              });
              releaseBody += `\n`;
            }
            
            // 添加系统要求
            releaseBody += `## 💻 系统要求\n\n`;
            releaseBody += `- **Windows**: Windows 10 版本 1903 或更高\n`;
            releaseBody += `- **macOS**: macOS 10.15 或更高\n`;
            releaseBody += `- **Linux**: 支持 GTK 3.24 或更高的发行版\n\n`;
            
            // 添加安装说明
            releaseBody += `## 🚀 安装说明\n\n`;
            releaseBody += `1. 从上方下载适合您系统的安装包\n`;
            releaseBody += `2. 运行安装程序并按照提示完成安装\n`;
            releaseBody += `3. 启动 AiOne 开始使用\n\n`;
            
            // 添加项目链接
            releaseBody += `## 🔗 相关链接\n\n`;
            releaseBody += `- [项目主页](https://github.com/${context.repo.owner}/${context.repo.repo})\n`;
            releaseBody += `- [问题反馈](https://github.com/${context.repo.owner}/${context.repo.repo}/issues)\n`;
            releaseBody += `- [更新日志](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/CHANGELOG.md)\n`;
            
            console.log('Updating release with enhanced description...');
            
            // 更新 release
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              body: releaseBody,
              draft: false,
              prerelease: release.tag_name.includes('-')
            });
            
            console.log(`✅ Released ${release.tag_name} successfully!`);
            console.log(`🔗 Release URL: ${release.html_url}`);
            
            return {
              tag: release.tag_name,
              url: release.html_url,
              assets_count: assets.length
            };
      
      - name: Notify on success
        if: success()
        run: |
          echo "🎉 Release published successfully!"
          echo "📋 Release details:"
          echo "  - Tag: ${{ fromJSON(steps.publish-release.outputs.result).tag }}"
          echo "  - Assets: ${{ fromJSON(steps.publish-release.outputs.result).assets_count }} files"
          echo "🔗 Release URL: ${{ fromJSON(steps.publish-release.outputs.result).url }}"
          echo ""
          echo "📦 Download links:"
          echo "  - GitHub Releases: https://github.com/${{ github.repository }}/releases"
          echo "  - Latest Release: https://github.com/${{ github.repository }}/releases/latest"
